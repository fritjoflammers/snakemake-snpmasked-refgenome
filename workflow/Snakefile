import glob
import os
from snakemake.remote.FTP import RemoteProvider as FTPRemoteProvider
from snakemake.remote.HTTP import RemoteProvider as HTTPRemoteProvider

FTP = FTPRemoteProvider(username="anonymous", password="mypassword")
HTTP = HTTPRemoteProvider()

print(config)

STRAINS = config.get("strains")

all_files = [
    "output/GRCm38_masked_{strain}".format(strain=strain)
    for strain in config.get("strains")
] + [
    "all_SNPs_{strain}_GRCm38.bed.gz".format(strain=strain)
    for strain in config.get("strains")
] + [
    "output/all_SNPs_all_strains_GRCm38.bed.gz"
]

print(all_files)


localrules:
    all,
    snp_split_concat,
    rename_fasta_header,
    rename_gtf_names


rule all:
    input:
        all_files,


# rule retrieve_snp_vcf:
#    #    input: HTTP.remote("ftp.sanger.ac.uk/pub/REL-1505-SNPs_Indels/mgp.v5.merged.snps_all.dbSNP142.vcf.gz", keep_local=True)
#    output: "data/mgp.v5.merged.snps_all.dbSNP142.vcf.gz"
#    run:
# 	print("File is there {output}")

rule rename_fasta_header:
    input: config.get("genome"),
    output:
        fasta=temp("output/mm10_fixed_headers/genome.fa"),
        dir=directory("output/mm10_fixed_headers/")
    params:
        sed_expr="s/>.* />/g"
    message: "edit fasta headers"
    log:
        "logs/edit_fasta_header.log"
    shell:
        "echo 'running sed {params.sed_expr} to rename fasta header' > {log}; "
        "sed '{params.sed_expr}' {input} > {output.fasta}"


rule rename_gtf_names:
    input: config.get("annotation"),
    output:
        gtf=temp("output/mm10_fixed_headers.gtf"),
    params:
        sed_expr="s/^chr//g"
    message: "edit GTF headers"
    log:
        "logs/edit_gtf_names.log"
    shell:
        "echo 'running sed {params.sed_expr} to rename GTF header' > {log}; "
        "sed '{params.sed_expr}' {input} > {output.gtf}"

checkpoint snp_split:
    input:
        vcf_file="data/mgp.v5.merged.snps_all.dbSNP142.vcf.gz",
        ref_genome=rules.rename_fasta_header.output.dir,
    output:
        dir_snp=temp(directory("output/SNPs_{strain}/")),
        dir_fa=directory("output/{strain}_N-masked/"),
        report="output/{strain}_SNP_filtering_report.txt",
        archive="output/all_SNPs_{strain}_GRCm38.txt.gz",
    message:
        "snpsplit prepare"
    conda:
        "envs/snpsplit.yml"
    log:
        "logs/snp_split_{strain}.log",
    params:
        strain=lambda wildcards: wildcards.strain,
    shell:
        "cd output; mkdir -p logs && "
        "SNPsplit_genome_preparation --vcf_file ../{input.vcf_file} --strain {params.strain} --reference_genome ../{input.ref_genome} > {log}"

rule snp_split_create_sorted_bed:
    input:
        lambda wildcards: checkpoints.snp_split.get(**wildcards).output.archive
    output:
        bed="output/all_SNPs_{strain}_GRCm38.bed.gz"
    log:
        logs="logs/create_bed_{strain}.log"
    shell:
        "zcat {input} | sort -V -k2,2 -k3,3 | awk 'OFS=\"\t\" {{print $2, $3, $3+1, $5}}' | gzip -c > {output.bed} 2> {log}"


rule merge_bed_files:
    input:
        expand("output/all_SNPs_{strain}_GRCm38.bed.gz", strain=STRAINS)
    output:
        bed="output/all_SNPs_all_strains_GRCm38.bed.gz",
    envmodules:
        "bedtools/2.24.0"
    shell:
        "zcat {input} | bedtools sort -i - | bedtools merge -i - | gzip -c > {output.bed}"

rule snp_split_concat:
    input:
        lambda wildcards: sorted(
            glob.glob(
                "{directory}/{filename_pattern}".format(
                    directory=checkpoints.snp_split.get(**wildcards).output.dir_fa,
                    filename_pattern="*.fa",
                )
            )
        ),
    wildcard_constraints:
        strain="|".join(config.get("strains")),
    output:
        "output/GRCm38_masked_{strain}.fa",
    run:
        print("{input}")
        shell("cat {input} > {output}")


rule cellranger_rna_mkref:
    input:
        fasta=rules.snp_split_concat.output,
        annotation=rules.rename_gtf_names.output.gtf,
    output:
        directory("output/GRCm38_masked_{strain}"),
    wildcard_constraints:
        strain="|".join(config.get("strains")),
    params:
        mem=300,
        output_root_dir=lambda wildcards, output: os.path.split(output[0])[0],
        cellranger_mkref_bin=config["executables"]["cellranger-rna"],
        genome=lambda wildcards, input: f"GRCm38_masked_{wildcards.strain}",
    log:
        "cellranger_rna_mkref_GRCm38_masked_{strain}.log",
    shell:
        "cd output && "
        "{params.cellranger_mkref_bin} "
        "--genome={params.genome} "
        "--fasta=../{input.fasta[0]} "
        "--genes=../{input.annotation} "
        "--memgb={params.mem} > {log}"
