import os

from snakemake.remote.FTP import RemoteProvider

from snakemake.remote.FTP import RemoteProvider as FTPRemoteProvider
from snakemake.remote.HTTP import RemoteProvider as HTTPRemoteProvider

FTP = FTPRemoteProvider(username="anonymous", password="mypassword")
HTTP = HTTPRemoteProvider()

print(config)

all_files = ["output/GRCm38_masked_{strain}".format(strain=strain) for strain in config.get("strains")]

print(all_files)

rule all:
    input:
        all_files



#rule retrieve_snp_vcf:
#    #    input: HTTP.remote("ftp.sanger.ac.uk/pub/REL-1505-SNPs_Indels/mgp.v5.merged.snps_all.dbSNP142.vcf.gz", keep_local=True)
#    output: "data/mgp.v5.merged.snps_all.dbSNP142.vcf.gz"
#    run:
#	print("File is there {output}")

checkpoint snp_split:
    input:
        vcf_file="data/mgp.v5.merged.snps_all.dbSNP142.vcf.gz",
        ref_genome=config.get("genome")
    output:
        temp(directory("{strain}_N-masked/"))
    message:
        "snpsplit prepare"
    conda:
        "envs/snpsplit-{strain}.yml"
    log:
        "logs/snp_split_{strain}.log"
    params:
        strain=lambda wildcards: wildcards.strain
    shell:
        "SNPsplit_genome_preparation --vcf_file {input.vcf_file} --strain {params.strain} --reference_genome {input.ref_genome}"

rule snp_split_concat:
    input:
        lambda wildcards: os.listdir(checkpoints.snp_split.get(**wildcards).output[0])
    output:
        "output/GRCm38.masked_{strain}.fa"
    shell:
        "cat {input} > {output}"


rule cellranger_rna_mkref:
    input:
        fasta=rules.snp_split_concat.output,
        annotation=config.get("annotation")
    output:
        directory("output/GRCm38_masked_{strain}")
    params:
        mem=300,
        output_root_dir=lambda wildcards, output: os.path.split(output[0])[0],
        cellranger_mkref_bin=config["executables"]["cellranger-rna"],
        genome=lambda wildcards, input: f"GRCm38_masked_{wildcards.strain}"
    log:
        "output/GRCm38_masked_{strain}/cellranger_rna_mkref.log"
    shell:
        "mkdir -p {params.output_root_dir} ; "
        "cd {params.output_root_dir} ; "
        "echo Working directory is now: $(pwd) > {log} &&"
        "{params.cellranger_mkref_bin}"
        "--genome={params.genome} "
        "--fasta={input.fasta[0]} "
        "--genes={input.annotation[0]} "
        "--memgb={params.mem} > {log}"


